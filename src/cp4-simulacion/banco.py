# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1deNmE3cDav9f0TFlxrtiPM2yaGu6qop2
"""

# !pip install simpy

import simpy
import random
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats

# Parámetros del sistema - ahora configurables
SIMULACION_TIEMPO = 100  # tiempo de simulación en minutos
NUM_REPLICAS = 30  # número de réplicas para análisis estadístico

class BancoSimulacion:
    def __init__(self, env, config):
        self.env = env
        self.config = config
        self.cajas = simpy.Resource(env, capacity=config['num_cajas'])
        self.gerentes = simpy.Resource(env, capacity=config['num_gerentes'])

        # Métricas de desempeño
        self.clientes_atendidos = 0
        self.tiempos_espera_cajas = []
        self.tiempos_espera_gerentes = []
        self.tiempos_sistema = []
        self.clientes_cola_cajas = []
        self.clientes_cola_gerentes = []

        # Iniciar procesos
        env.process(self.llegada_cliente())

    def llegada_cliente(self):
        while True:
            yield self.env.timeout(random.expovariate(1.0 / self.config['media_interarribo']))
            cliente = {
                'id': f'Cliente-{self.env.now:.2f}',
                'tiempo_llegada': self.env.now,
                'tiempo_salida': None,
                'tiempo_espera_caja': 0,
                'tiempo_espera_gerente': 0
            }
            self.env.process(self.proceso_cliente(cliente))

    def proceso_cliente(self, cliente):
        # Probabilidad de que pase al Área Principal o Gerentes
        if random.random() < self.config['prob_area_principal']:
            yield from self.area_principal(cliente)
        else:
            yield from self.area_gerentes(cliente)

        # Registrar tiempo en el sistema
        cliente['tiempo_salida'] = self.env.now
        self.tiempos_sistema.append(cliente['tiempo_salida'] - cliente['tiempo_llegada'])
        self.clientes_atendidos += 1

    def area_principal(self, cliente):
        # Probabilidad de pasar a Mesas o directamente a Cajas
        if random.random() < self.config['prob_ir_mesas']:
            yield from self.area_mesas(cliente)
        else:
            yield from self.area_cajas(cliente)

    def area_mesas(self, cliente):
        tiempo_preparacion = random.uniform(
            self.config['tiempo_formulario_min'],
            self.config['tiempo_formulario_max']
        )
        yield self.env.timeout(tiempo_preparacion)
        yield from self.area_cajas(cliente)

    def area_cajas(self, cliente):
        llegada_caja = self.env.now
        with self.cajas.request() as request:
            # Registrar longitud de cola al llegar
            self.clientes_cola_cajas.append(len(self.cajas.queue))

            yield request  # Espera en cola
            cliente['tiempo_espera_caja'] = self.env.now - llegada_caja
            self.tiempos_espera_cajas.append(cliente['tiempo_espera_caja'])

            tiempo_servicio = random.uniform(
                self.config['tiempo_servicio_caja_min'],
                self.config['tiempo_servicio_caja_max']
            )
            yield self.env.timeout(tiempo_servicio)

    def area_gerentes(self, cliente):
        llegada_gerente = self.env.now
        with self.gerentes.request() as request:
            # Registrar longitud de cola al llegar
            self.clientes_cola_gerentes.append(len(self.gerentes.queue))

            yield request  # Espera en cola
            cliente['tiempo_espera_gerente'] = self.env.now - llegada_gerente
            self.tiempos_espera_gerentes.append(cliente['tiempo_espera_gerente'])

            tiempo_servicio = random.uniform(
                self.config['tiempo_servicio_gerente_min'],
                self.config['tiempo_servicio_gerente_max']
            )
            yield self.env.timeout(tiempo_servicio)

            # Probabilidad de regresar al área principal
            if random.random() < self.config['prob_regresar_principal']:
                yield from self.area_principal(cliente)





def ejecutar_simulacion(config):
    env = simpy.Environment()
    simulacion = BancoSimulacion(env, config)
    env.run(until=config['tiempo_simulacion'])

    # Calcular métricas
    metrics = {
        'throughput': simulacion.clientes_atendidos / config['tiempo_simulacion'],
        'avg_tiempo_sistema': np.mean(simulacion.tiempos_sistema) if simulacion.tiempos_sistema else 0,
        'avg_tiempo_espera_caja': np.mean(simulacion.tiempos_espera_cajas) if simulacion.tiempos_espera_cajas else 0,
        'avg_tiempo_espera_gerente': np.mean(simulacion.tiempos_espera_gerentes) if simulacion.tiempos_espera_gerentes else 0,
        'max_cola_cajas': max(simulacion.clientes_cola_cajas) if simulacion.clientes_cola_cajas else 0,
        'max_cola_gerentes': max(simulacion.clientes_cola_gerentes) if simulacion.clientes_cola_gerentes else 0,
        'clientes_atendidos': simulacion.clientes_atendidos
    }
    return metrics

def analisis_estadistico(resultados):
    print("\n--- Análisis Estadístico ---")

    # Throughput
    throughputs = [r['throughput'] for r in resultados]
    print(f"Throughput promedio: {np.mean(throughputs):.2f} clientes/min")
    print(f"Intervalo de confianza (95%): {stats.t.interval(0.95, len(throughputs)-1, loc=np.mean(throughputs), scale=stats.sem(throughputs))}")

    # Tiempo en sistema
    tiempos_sistema = [r['avg_tiempo_sistema'] for r in resultados]
    print(f"\nTiempo promedio en sistema: {np.mean(tiempos_sistema):.2f} min")
    print(f"Intervalo de confianza (95%): {stats.t.interval(0.95, len(tiempos_sistema)-1, loc=np.mean(tiempos_sistema), scale=stats.sem(tiempos_sistema))}")

    # Tiempo espera cajas
    tiempos_cajas = [r['avg_tiempo_espera_caja'] for r in resultados]
    print(f"\nTiempo promedio espera en cajas: {np.mean(tiempos_cajas):.2f} min")
    print(f"Intervalo de confianza (95%): {stats.t.interval(0.95, len(tiempos_cajas)-1, loc=np.mean(tiempos_cajas), scale=stats.sem(tiempos_cajas))}")

    # Máximos en cola
    max_colas_cajas = [r['max_cola_cajas'] for r in resultados]
    print(f"\nMáximo en cola de cajas: {np.mean(max_colas_cajas):.1f} (promedio)")

    # Gráficos
    plt.figure(figsize=(15, 10))

    plt.subplot(2, 2, 1)
    plt.hist(tiempos_sistema, bins=20, edgecolor='black')
    plt.title('Distribución del Tiempo en el Sistema')
    plt.xlabel('Minutos')
    plt.ylabel('Frecuencia')

    plt.subplot(2, 2, 2)
    plt.hist(tiempos_cajas, bins=20, edgecolor='black')
    plt.title('Distribución del Tiempo de Espera en Cajas')
    plt.xlabel('Minutos')
    plt.ylabel('Frecuencia')

    plt.subplot(2, 2, 3)
    plt.plot([r['clientes_atendidos'] for r in resultados], marker='o')
    plt.title('Clientes Atendidos por Réplica')
    plt.xlabel('Réplica')
    plt.ylabel('Clientes')

    plt.subplot(2, 2, 4)
    plt.plot(max_colas_cajas, marker='o')
    plt.title('Máximo en Cola de Cajas por Réplica')
    plt.xlabel('Réplica')
    plt.ylabel('Clientes en cola')

    plt.tight_layout()
    plt.show()

def validacion_configuracion(config):
    # Validación básica de parámetros
    assert config['media_interarribo'] > 0, "Tiempo entre llegadas debe ser positivo"
    assert config['tiempo_formulario_min'] <= config['tiempo_formulario_max'], "Rango de tiempo formulario inválido"
    assert config['num_cajas'] > 0, "Debe haber al menos una caja"
    assert 0 <= config['prob_area_principal'] <= 1, "Probabilidad debe estar entre 0 y 1"
    print("Configuración validada correctamente")

def main():
    # Configuración del sistema
    config = {
        'media_interarribo': 0.5,
        'tiempo_formulario_min': 0.5,
        'tiempo_formulario_max': 2,
        'tiempo_servicio_caja_min': 1,
        'tiempo_servicio_caja_max': 2,
        'tiempo_servicio_gerente_min': 0.5,
        'tiempo_servicio_gerente_max': 2,
        'num_cajas': 3,
        'num_gerentes': 3,
        'prob_area_principal': 0.8,
        'prob_ir_mesas': 0.25,
        'prob_regresar_principal': 0.2,  # 20% de volver al área principal
        'tiempo_simulacion': SIMULACION_TIEMPO
    }

    # Validar configuración
    validacion_configuracion(config)

    # Ejecutar múltiples réplicas
    resultados = []
    for i in range(NUM_REPLICAS):
        print(f"Ejecutando réplica {i+1}/{NUM_REPLICAS}")
        resultados.append(ejecutar_simulacion(config))

    # Análisis estadístico
    analisis_estadistico(resultados)

    # Prueba de sensibilidad - variar número de cajas
    print("\n--- Prueba de Sensibilidad (Número de Cajas) ---")
    for num_cajas in [2, 3, 4]:
        config_temp = config.copy()
        config_temp['num_cajas'] = num_cajas
        resultados_temp = [ejecutar_simulacion(config_temp) for _ in range(10)]
        tiempos = [r['avg_tiempo_espera_caja'] for r in resultados_temp]
        print(f"Cajas: {num_cajas} | Tiempo espera promedio: {np.mean(tiempos):.2f} min")

if __name__ == "__main__":
    main()